OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
/*OUTPUT_FORMAT("elf32-arm", "elf32-arm", "elf32-arm")*/
OUTPUT_ARCH(arm)
ENTRY(_start)
SECTIONS
{
	. = 0x00000000;

	. = ALIGN(4);
	.text      :
	{
	  cpu/arm926ejs/start.o	(.text)
	  *(.text)
	  lib_arm/div0.o	(.text)
	}

	. = ALIGN(4);
	.rodata : { *(.rodata) }

	. = ALIGN(4);
	__exidx_start = .;
	PROVIDE(__exidx_start = __exidx_start);
	.ARM.exidx :
	{
		/* __exidx_start = .; */
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
		/* __exidx_end = .; */
	}
	__exidx_end = .;

	. = ALIGN(4);
	__data_start = .;
	.data : { *(.data) }

	. = ALIGN(4);
	__bss_start = .;
	.bss : { *(.bss) }
	. = ALIGN(4);
	_end = .;
	
	. = ALIGN(4);
	. = . + 0x1000; /* 4kB of stack memory */
	__stack_fiq_end__ = .;
	. = . + 0x1000; /* 4kB of stack memory */
	__stack_irq_end__ = .;
	. = . + 0x1000; /* 4kB of stack memory */
	__stack_abt_end__ = .;
	. = . + 0x1000; /* 4kB of stack memory */
	__stack_und_end__ = .;
	. = . + 0x1000; /* 4kB of stack memory */
	__stack_sys_end__ = .;
	. = . + 0x1000; /* 4kB of stack memory */
	__stack_svc_end__ = .;
	. = . + 0x1000; /* 4kB of stack memory */
	__stack_isr_end__ = .;
}
